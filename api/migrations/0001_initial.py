# Generated by Django 5.2.7 on 2025-10-04 20:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(db_index=True, max_length=100)),
                ('event_type', models.CharField(max_length=50)),
                ('event_id', models.CharField(max_length=100, unique=True)),
                ('repo_name', models.CharField(max_length=200)),
                ('event_data', models.JSONField()),
                ('contribution_value_score', models.FloatField(default=1.0)),
                ('timestamp', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ContributorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('github_id', models.IntegerField(unique=True)),
                ('platform', models.CharField(default='github', max_length=20)),
                ('profile_url', models.URLField()),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('activity_score', models.FloatField(default=0.0)),
                ('total_claims', models.IntegerField(default=0)),
                ('completed_claims', models.IntegerField(default=0)),
                ('comment_quality_score', models.FloatField(default=5.0)),
                ('code_quality_score', models.FloatField(default=5.0)),
                ('engagement_authenticity_score', models.FloatField(default=5.0)),
                ('behavioral_consistency_score', models.FloatField(default=5.0)),
                ('trust_score', models.FloatField(default=5.0)),
                ('ai_tags', models.JSONField(default=list)),
                ('strengths', models.JSONField(default=list)),
                ('risk_factors', models.JSONField(default=list)),
                ('recommendations', models.JSONField(default=list)),
                ('last_activity_check', models.DateTimeField(blank=True, null=True)),
                ('last_ai_analysis', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='GitHubUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('github_id', models.IntegerField(unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('access_token', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_id', models.IntegerField()),
                ('issue_number', models.IntegerField()),
                ('title', models.CharField(max_length=500)),
                ('body', models.TextField(blank=True, null=True)),
                ('state', models.CharField(default='open', max_length=20)),
                ('assignee', models.CharField(blank=True, max_length=100, null=True)),
                ('assignees', models.JSONField(default=list)),
                ('labels', models.JSONField(default=list)),
                ('url', models.URLField()),
                ('complexity_score', models.FloatField(default=1.0)),
                ('last_assigned_at', models.DateTimeField(blank=True, null=True)),
                ('last_reminder_sent', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('full_name', models.CharField(max_length=200, unique=True)),
                ('github_id', models.IntegerField(unique=True)),
                ('owner', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.URLField()),
                ('is_private', models.BooleanField(default=False)),
                ('language', models.CharField(blank=True, max_length=50, null=True)),
                ('stars_count', models.IntegerField(default=0)),
                ('forks_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AIAnalysisLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_type', models.CharField(max_length=50)),
                ('input_data_hash', models.CharField(max_length=64)),
                ('gemini_prompt', models.TextField()),
                ('gemini_response', models.TextField()),
                ('confidence_score', models.FloatField(default=0.0)),
                ('tokens_used', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('contributor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.contributorprofile')),
            ],
        ),
        migrations.CreateModel(
            name='InactiveContributorDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignee_username', models.CharField(max_length=100)),
                ('days_inactive', models.IntegerField()),
                ('last_activity_date', models.DateTimeField(blank=True, null=True)),
                ('trust_score_at_detection', models.FloatField()),
                ('risk_factors', models.JSONField(default=list)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_comment_url', models.URLField(blank=True, null=True)),
                ('unassigned', models.BooleanField(default=False)),
                ('unassigned_at', models.DateTimeField(blank=True, null=True)),
                ('unassign_reason', models.CharField(blank=True, max_length=200, null=True)),
                ('contributor_responded', models.BooleanField(default=False)),
                ('response_at', models.DateTimeField(blank=True, null=True)),
                ('outcome', models.CharField(choices=[('pending', 'Pending'), ('reminded', 'Reminder Sent'), ('responded', 'Contributor Responded'), ('unassigned', 'Auto-unassigned'), ('resolved', 'Issue Resolved')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contributor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.contributorprofile')),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.issue')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_id', models.IntegerField()),
                ('username', models.CharField(max_length=100)),
                ('body', models.TextField()),
                ('html_url', models.URLField()),
                ('sentiment_score', models.FloatField(default=5.0)),
                ('helpfulness_score', models.FloatField(default=5.0)),
                ('technical_accuracy_score', models.FloatField(default=5.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.issue')),
            ],
        ),
        migrations.CreateModel(
            name='ReminderMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(default='gentle', max_length=20)),
                ('github_comment_id', models.IntegerField(blank=True, null=True)),
                ('message_body', models.TextField()),
                ('html_url', models.URLField(blank=True, null=True)),
                ('personalized', models.BooleanField(default=False)),
                ('ai_tone', models.CharField(blank=True, max_length=50, null=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('detection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.inactivecontributordetection')),
            ],
        ),
        migrations.AddField(
            model_name='issue',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='api.repository'),
        ),
        migrations.AlterUniqueTogether(
            name='issue',
            unique_together={('repository', 'issue_number')},
        ),
    ]
